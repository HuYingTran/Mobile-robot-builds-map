#include <SimpleKalmanFilter.h>
SimpleKalmanFilter bo_loc(2, 2, 0.1);
float u_kalman;


#define  encoderPinA  2   // Tương ứng chân DT trên Encoder quay
#define  encoderPinB  3   // Tương ứng chân CLK trên Encoder quay

volatile  int encoderPos = 0;  // Cho vị trí đầu bằng 0
int lastReportedPos = 1;   // Vị trí cuối bằng 1
static boolean rotating=false;      // Quản lý debounce (giống như là chống nhiễu)

// các biến cho trình phục vụ ngắt interrupt service routine vars
boolean A_set = false;             
boolean B_set = false;

//Đo tốc độ
int newposition; // vi tri moi
int oldposition=0; // vi tri cu
long newtime;
long oldtime=0;
float vantoc = 0;

int i;

 
void setup() {
  pinMode(5,OUTPUT);
  pinMode(6,OUTPUT);

  pinMode(encoderPinA, INPUT_PULLUP); // INPUT-PULLUP tương đương Mode INPUT và tự động nhận trạng thái HIGH hoặc LOW
  pinMode(encoderPinB, INPUT_PULLUP);

  attachInterrupt(0, doEncoderA, CHANGE);
  attachInterrupt(1, doEncoderB, CHANGE);

  Serial.begin(9600);  // chuyển dữ liệu lên cổng Serial Port
  digitalWrite(5, LOW);// chân này không có PWM
  analogWrite(6, 50);
}

void loop() {
  for(i=0;i<100;i++){
    delay(1000);
    rotating = true;  // Khởi động bộ debounce (có thể hiểu như bộ chống nhiễu)
    newtime=millis();
    newposition = encoderPos;
    detachInterrupt(0);
    detachInterrupt(1);
    
    vantoc = float(newposition)*30/334;

    u_kalman = bo_loc.updateEstimate(vantoc);
    //Serial.print("KALMAN");
    Serial.print(u_kalman);
    Serial.print(" ");
    encoderPos = 0;
    oldtime = newtime;
    
    //Serial.print("VANTOC");
    Serial.println(vantoc);

    attachInterrupt(0, doEncoderA, CHANGE);
    attachInterrupt(1, doEncoderB, CHANGE);
    if(i==50){
      delay(1000);
      digitalWrite(5,HIGH);// chân này không có PWM
      analogWrite(6,205);
    }
  }
}

// Ngắt khi chuyển trạng thái của A
void doEncoderA(){
  if ( rotating ) delay (1);  // Chờ 1 chút
  // Kiểm tra việc chuyển đổi trạng thái, xem có thật sự thay đổi trạng thái chưa
  if( digitalRead(encoderPinA) != A_set ) {  // debounce một lần nữa
    A_set = !A_set;
    // Cộng 1 nếu có tín hiệu A rồi có tín hiệu B       
    if ( A_set && !B_set )
      encoderPos += 1;
    rotating = false;  // Không cần debounce nữa cho đến khi được nhấn lần nữa
  }
}
// Ngắt khi thay đổi trạng thái ở B, tương tự như ở A

void doEncoderB(){
  if ( rotating ) delay (1);
  if( digitalRead(encoderPinB) != B_set ) {
    B_set = !B_set;
    //  Trừ 1 nếu B rồi đến A
    if( B_set && !A_set )
      encoderPos -= 1;
      rotating = false;
  }
}