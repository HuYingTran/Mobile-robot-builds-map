template <int order> // order is 1 or 2
class LowPass
{
  private:
    float a[order];
    float b[order+1];
    float omega0;
    float dt;
    bool adapt;
    float tn1 = 0;
    float x[order+1]; // Raw values
    float y[order+1]; // Filtered values

  public:  
    LowPass(float f0, float fs, bool adaptive){
      // f0: cutoff frequency (Hz)
      // fs: sample frequency (Hz)
      // adaptive: boolean flag, if set to 1, the code will automatically set
      // the sample frequency based on the time history.
      
      omega0 = 6.28318530718*f0;
      dt = 1.0/fs;
      adapt = adaptive;
      tn1 = -dt;
      for(int k = 0; k < order+1; k++){
        x[k] = 0;
        y[k] = 0;        
      }
      setCoef();
    }

    void setCoef(){
      if(adapt){
        float t = micros()/1.0e6;
        dt = t - tn1;
        tn1 = t;
      }
      
      float alpha = omega0*dt;
      if(order==1){
        a[0] = -(alpha - 2.0)/(alpha+2.0);
        b[0] = alpha/(alpha+2.0);
        b[1] = alpha/(alpha+2.0);        
      }
      if(order==2){
        float c1 = 2*sqrt(2)/alpha;
        float c2 = 4/(alpha*alpha);
        float denom = 1.0+c1+c2;
        b[0] = 1.0/denom;
        b[1] = 2.0/denom;
        b[2] = b[0];
        a[0] = -(2.0-2.0*c2)/denom;
        a[1] = -(1.0-c1+c2)/(1.0+c1+c2);      
      }
    }

    float filt(float xn){
      // Provide me with the current raw value: x
      // I will give you the current filtered value: y
      if(adapt){
        setCoef(); // Update coefficients if necessary      
      }
      y[0] = 0;
      x[0] = xn;
      // Compute the filtered values
      for(int k = 0; k < order; k++){
        y[0] += a[k]*y[k+1] + b[k]*x[k];
      }
      y[0] += b[order]*x[order];

      // Save the historical values
      for(int k = order; k > 0; k--){
        y[k] = y[k-1];
        x[k] = x[k-1];
      }
  
      // Return the filtered value    
      return y[0];
    }
};

// Filter instance
LowPass<2> lpx(3,1e3,true);
LowPass<2> lpy(3,1e3,true);
LowPass<2> lpz(3,1e3,true);
//======================================================================
#include <Wire.h>
#include <MMA8453_n0m1.h>
MMA8453_n0m1 accel;
#define red 10
#define green 9
#define blue 8

void setup() {
  Serial.begin(115200);
  accel.setI2CAddr(0x1C); //change your device address if necessary, default is 0x1C
  accel.dataMode(true, 2); //enable highRes 10bit, 2g range [2g,4g,8g]
  pinMode(red,OUTPUT);
  pinMode(green,OUTPUT);
  pinMode(blue,OUTPUT);
}

void loop() {
  accel.update();
  int accX= accel.x();
  int accY= accel.y();
  int accZ= accel.z();
//  Serial.print("x:");
//  Serial.print(accX);
//  Serial.print("\ty:");
//  Serial.print(accY);
//  Serial.print("\tz:");
//  Serial.println(accZ);
  if(abs(accX)>100){
    digitalWrite(red,HIGH);
  }else{
    digitalWrite(red,LOW);
  }
  if(abs(accY)<200){
    digitalWrite(green,HIGH);
  }else{
    digitalWrite(green,LOW);
  }
  if(abs(accZ)>100){
    digitalWrite(blue,HIGH);
  }else{
    digitalWrite(blue,LOW);
  }
  
  float x = lpx.filt(accX);
  float y = lpy.filt(accY);
  float z = lpz.filt(accZ);

  // Output
  Serial.print(accX);Serial.print(" ");Serial.print(x);Serial.print(" ");
  Serial.print(accY);Serial.print(" ");Serial.print(y);Serial.print(" ");
  Serial.print(accZ);Serial.print(" ");Serial.print(z);Serial.print(" ");
  Serial.println();
  delayMicroseconds(200);
}